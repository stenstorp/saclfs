pkgname=gcc
version=8.2.0
revision=1
download=https://ftp.gnu.org/gnu/gcc/gcc-${version}/gcc-${version}.tar.xz
patches=isl-0.20.patch

function cross-compiler-static {
  patch -p0 < ${CLFS_PACKAGES}/gcc/clfs.patch

  source ${CLFS_PACKAGES}/glibc/template
  GLIBC_VERSION=$version
  source ${CLFS_PACKAGES}/gcc/template

  echo -en '\n#undef STANDARD_STARTFILE_PREFIX_1\n#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"\n' >> gcc/config/rs6000/sysv4.h
  echo -en '\n#undef STANDARD_STARTFILE_PREFIX_2\n#define STANDARD_STARTFILE_PREFIX_2 ""\n' >> gcc/config/rs6000/sysv4.h

  mkdir -p /tools/include
  touch /tools/include/limits.h

  mkdir ../gcc-build
  cd ../gcc-build

  AR=ar \
  LDFLAGS="-Wl,-rpath,/cross-tools/lib" \
  ../gcc-$version/configure \
    --prefix=/cross-tools \
    --build=${CLFS_HOST} \
    --host=${CLFS_HOST} \
    --target=${CLFS_TARGET} \
    --with-sysroot=${CLFS} \
    --with-local-prefix=/tools \
    --with-native-system-header-dir=/tools/include \
    --disable-shared \
    --with-mpfr=/cross-tools \
    --with-gmp=/cross-tools \
    --with-isl=/cross-tools \
    --with-mpc=/cross-tools \
    --without-headers \
    --with-newlib \
    --disable-decimal-float \
    --disable-libgomp \
    --disable-libssp \
    --disable-libatomic \
    --disable-libitm \
    --disable-libsanitizer \
    --disable-libquadmath \
    --disable-libvtv \
    --disable-libcilkrts \
    --disable-libstdc++-v3 \
    --disable-threads \
    --disable-multilib \
    --enable-languages=c \
    --with-glibc-version=${GLIBC_VERSION}

  make -j${THREADS} all-gcc all-target-libgcc
  make install-gcc install-target-libgcc
}

function cross-compiler-final {
  patch -p0 < ${CLFS_PACKAGES}/gcc/clfs.patch

  echo -en '\n#undef STANDARD_STARTFILE_PREFIX_1\n#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"\n' >> gcc/config/rs6000/sysv4.h
  echo -en '\n#undef STANDARD_STARTFILE_PREFIX_2\n#define STANDARD_STARTFILE_PREFIX_2 ""\n' >> gcc/config/rs6000/sysv4.h

  mkdir ../gcc-build
  cd ../gcc-build

  AR=ar \
  LDFLAGS="-Wl,-rpath,/cross-tools/lib" \
  ../gcc-$version/configure \
    --prefix=/cross-tools \
    --build=${CLFS_HOST} \
    --target=${CLFS_TARGET} \
    --host=${CLFS_HOST} \
    --with-sysroot=${CLFS} \
    --with-local-prefix=/tools \
    --with-native-system-header-dir=/tools/include \
    --disable-nls \
    --disable-static \
    --enable-languages=c,c++ \
    --disable-multilib \
    --with-mpc=/cross-tools \
    --with-mpfr=/cross-tools \
    --with-gmp=/cross-tools \
    --with-isl=/cross-tools

  make -j${THREADS} AS_FOR_TARGET="${CLFS_TARGET}-as" LD_FOR_TARGET="${CLFS_TARGET}-ld"
  make install
}

function cross {
  patch -p0 < ${CLFS_PACKAGES}/gcc/clfs.patch

  echo -en '\n#undef STANDARD_STARTFILE_PREFIX_1\n#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"\n' >> gcc/config/rs6000/sysv4.h
  echo -en '\n#undef STANDARD_STARTFILE_PREFIX_2\n#define STANDARD_STARTFILE_PREFIX_2 ""\n' >> gcc/config/rs6000/sysv4.h

  cp -v gcc/Makefile.in{,.orig}

  sed 's@\./fixinc\.sh@-c true@' gcc/Makefile.in.orig > gcc/Makefile.in

  ../gcc-$version/configure \
    --prefix=/tools \
    --build=${CLFS_HOST} \
    --host=${CLFS_TARGET} \
    --target=${CLFS_TARGET} \
    --with-local-prefix=/tools \
    --disable-multilib \
    --enable-languages=c,c++ \
    --with-system-zlib \
    --with-native-system-header-dir=/tools/include \
    --disable-libssp \
    --enable-install-libiberty

  make -j${THREADS} AS_FOR_TARGET="${AS}" LD_FOR_TARGET="${LD}"
  make install
}

function build {
  sed -i 's@\./fixinc\.sh@-c true@' gcc/Makefile.in

  mkdir ../gcc-build
  cd ../gcc-build

  SED=sed CC="gcc -isystem /usr/include" \
  CXX="g++ -isystem /usr/include" \
  LDFLAGS="-Wl,-rpath-link,/usr/lib:/lib" \
  ../gcc-$version/configure \
    --prefix=/usr \
    --libexecdir=/usr/lib \
    --enable-languages=c,c++ \
    --disable-multilib \
    --with-system-zlib \
    --enable-install-libiberty \
    --disable-bootstrap

  make -j${THREADS}
  make install

  ln -sv ../usr/bin/cpp /lib
  ln -sv gcc /usr/bin/cc

  mv -v /usr/lib/libstdc++*gdb.py /usr/share/gdb/auto-load/usr/lib
}
